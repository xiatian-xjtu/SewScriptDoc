技术路线
=================================
通过分析SewScript和通用PLC以及脚本语言的关系，一起了解一下SewScript的技术路线。

1.  平台型电控和PLC的关系
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
平台型电控和PLC实质目标是一致的，都是为了使得设备是可编程的，设备功能是可以自由定义或修改的。也可以说，平台型电控是一种自带“PLC”功能的电控。

平台型电控和PLC的主要区别是，平台型电控不具备也不追求PLC的通用性，没有实现IEC 61131-3标准规定的PLC，而是以脚本解释器的形式来实现。也可以说它是一种针对工缝行业的“简化版PLC”。

市面上的通用型PLC很难作为工缝行业的电控大面积使用。

.. image:: /.//image//generic-plc.svg
   :align: center
   :width: 400px
   :alt: generic-plc

|

成本上，通用型PLC方案一般由PLC+伺服驱动器+运动控制器+电源+其他模块，而市面上电控一般仅是一块单板，一片MCU就集成了所有这些硬件功能。如果借助CodeSys这样的软PLC，还需要额外的软件授权费用。

形态上，PLC多个部件如电源、运动控制模块、伺服驱动模块的集成箱体尺寸显著大于市面电控，同时会有大量模块间接线。除了一些特殊机器不受影响，集成到整机台架上面临很多问题。

.. image:: /.//image//sew-controller.svg
   :align: center
   :width: 400px
   :alt: sew-controller

|

**平台型电控被设计为可运行在现有电控上。除了对存储有些额外要求以外，没有任何超出现有电控硬件范围的要求。因此它可以继续保有现有电控的成本和形态。**

IEC 61131-3规定的PLC的编程方法有梯形图语言（LD）、指令表语言（IL）、功能模块块语言（FBD）、顺序功能流程图语言（SFC）、连续功能图语言（CFC）、以及结构化文本语言（ST）。 目前常用的是梯形图、功能模块以及结构化文本。

梯形图以及功能模块图非常适合做逻辑控制，但如果有比较复杂的计算时，结构化文本更为方便。

对于工缝行业来说，除了逻辑控制，重头戏在电机的运动控制。编程语言相较图形输入可以更方便的描述运动控制和人机界面设计，更方便的进行复杂计算。

平台选择了类似PLC结构化文本的SewScript脚本语言作为编程输入方式。

集成开发环境还根据工缝行业的特点，集成许多自动化设计、便利化设计功能来帮助开发者更加容易的来开发电控，这都是通用PLC工具生态链不具备的。例如集成环境可集成打版软件，运动监控等。


2. SewScript与流行的脚本语言的关系
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
目前有多种脚本和解释型语言流行，包括Java、Python、Lua，还有Arduino等。所有这些脚本语言各有其特点，但共同点是极大降低了开发者的门槛和学习曲线，避免了使用者花费大量时间在工具链的搭建学习以及熟悉底层驱动库等事项上面。

这些解释器起到了一种“胶水语言”的作用，将软件中偏底层驱动或较为通用的部分剥离出来形成开发者无需关心细节的函数库，如网络协议，科学计算，图形学算法，密码学算法等，而仅对使用者呈现一个较为简洁的API接口，使用者既可以方便的调用这些函数库，又可以自己写一些脚本来实现灵活改动和快捷调试和应用。

解释型语言一般的工作机制是，编译器将脚本编译为字节码，虚拟机执行字节码。虚拟机就是那个底层驱动封装的壳，开发者编写的程序正是通过虚拟机对封装函数库进行调用。

安卓系统的App就是运行在ART虚拟机之上的，开发者无需了解基带是如何打出电话的，也无需了解屏幕、触摸、Wifi、蓝牙、加速度计、罗盘等部件或传感器的驱动是怎样的，只需要通过编写Java程序调用相应的API函数即可。

.. image::  /.//image//new-solution.svg
   :align: center
   :width: 500px
   :alt: new-solution

| 

SewScript也是一种解释型语言，它将工缝电控需要用到的电机控制、人机界面、通信协议等封装起来，开发者既享有自主开发的灵活性，又不必直接面对繁琐的底层驱动。由上图可知，原来电控软件中灰色部分已经由脚本解释器进行了封装，变为解释器的运行时函数库（Runtime），开发者只需调用相应API就可以开发缝纫功能和设计人机界面即可。

SewScript是一种"胶水",将底层驱动和用户功能粘起来，凑成完成的软件拼图。

SewScript采用了C语言语法，因此熟悉C语言的技术人员可直接上手，目前工科专业均开设C语言课程，网上教程和资料也非常丰富。

上文提到的Python、Lua等解释器是一种动态语言，所谓“万物皆对象”，虽使用极为方便，但缺点是底层过于复杂，例如一个简单的加法计算，先要从对象列表里将操作对象搜索出来，对数据类型进行判断，到底是加整数还是加字符串得先弄清楚，最后根据数据类型和运算符来进行运算，这种复杂程度对电机驱动、运动控制等实时性要求高的应用来说不是非常合适。

工缝设备有一个特殊的地方就是电机驱动，电机驱动实时性要求高，操作不当还可能引起驱动电路损坏。

因此SewScript设计为一种静态语言，重点不是操作字符串处理、网络连接、多线程等“复杂多变对象”，而是与工业控制相关的各种确定性物理量和采集信号，所有变量都是确定的类型，通过编译器分配好地址，运算直接进行，避免了动态语言对象访问、类型判断以及运算符重载等操作。

SewScript预留了class语法糖，未来考虑以结构体为出发点，在标准C语言语法的基础上增加成员函数。

3. SewScript到底是C语言还是脚本
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SewScript虽然采用了C的语法，但和平时MCU开发工具的源码编译结果不同。MCU开发工具如MDK将源码编译为真实MCU机器码指令，SewScript解释器将源码编译来为虚拟机使用的字节码。

脚本因为在虚拟机里运行，运算速度性能会大幅度降低。经Fibonacci算法比较，约为机器码运行时的1/40。但对于流程控制逻辑，这个速度已经足以满足要求。十几元的MCU的运算能力已经能达到近200MIPS了，随着MCU国产化进程的推进，更高性能的低成本MCU还将层出不穷。

运行时底层驱动仍然是机器码运行，没有损失性能。如电机驱动，人机界面都是以编译好的机器码在运行。

fib(35)在STM32F429上的运行结果

======  ================  ========================================
类型      耗时(ms)                  描述
======  ================  ========================================
MCU        4212                 mcu直接运算
VM       159744                 虚拟机运算  
======  ================  ========================================

虚拟机虽然损失了速度，但增加了灵活性，用户可以自己开发控制逻辑时序等。增加一层虚拟机的目的正是为了实现底层运行时函数库和开发者程序的分离，对于二次开发者，运行时像是一个“沙盒”，隔离开后底层运行时驱动的完整性不会被二次开发程序所破坏。

用C解释C看似多余，但实际上此C非彼C，真C面对底层硬件，解释型C（SewScript）面对的是虚拟的运行时API。
